import { IUTable, IUTableOptions } from './types';
export declare class UTable implements IUTable {
    isScrollable: boolean;
    observer?: IntersectionObserver;
    options: IUTableOptions;
    shadowTable?: HTMLTableElement;
    table: HTMLTableElement;
    private _;
    constructor(table: HTMLTableElement | string, options?: Partial<IUTableOptions>);
    get el(): HTMLDivElement;
    get buttonLeft(): HTMLButtonElement;
    get buttonRight(): HTMLButtonElement;
    get scrollerHead(): HTMLDivElement | undefined;
    get scrollerBody(): HTMLDivElement;
    get overlayLeft(): HTMLDivElement[];
    get overlayRight(): HTMLDivElement[];
    get tableBody(): HTMLTableElement;
    get tableBodyHeight(): number;
    get tableHead(): HTMLTableElement | undefined;
    get top(): HTMLDivElement;
    get trackBody(): HTMLDivElement;
    get trackHead(): HTMLDivElement | undefined;
    destroy(): void;
    render(): this;
    update(): void;
    _createButton(className: string, text: string, title: string, event: () => void): HTMLButtonElement;
    _createElement<K extends keyof HTMLElementTagNameMap>(tag: K, options?: {
        className?: string;
        insertMethod?: 'prepend' | 'append' | 'before' | 'after';
        parent?: Element;
    }): HTMLElementTagNameMap[K];
    _createOverlay(className: string): HTMLDivElement[];
    _createShadowTable(): void;
    _isScrollable(): void;
    _isSticky(): void;
    _scrollTo(left: number): void;
    _setEqualWidth(): void;
    _setWidth(el: HTMLElement | HTMLElement[], width?: number | string): void;
    _toggleButton(el: HTMLButtonElement, isScroll: boolean): void;
    _toggleScroll(el: HTMLElement, isScroll: boolean): void;
    _onClickButtonLeft(): void;
    _onClickButtonRight(): void;
    _onResize(): void;
    _onScroll(): void;
}
